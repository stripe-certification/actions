{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-23T00:49:03.278Z",
    "end": "2022-02-23T00:49:12.995Z",
    "duration": 9652,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "486bf006-a447-495d-940a-e727c49d1962",
      "title": "",
      "fullFile": "cypress/integration/lesson_courses.js",
      "file": "cypress/integration/lesson_courses.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "84488a6e-2389-4162-a7ad-ac8cc91375dc",
          "title": "Payments Checkout Basic Setup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checkout Basic Setup visits page /concerts by url:1.3",
              "fullTitle": "Payments Checkout Basic Setup Checkout Basic Setup visits page /concerts by url:1.3",
              "timedOut": null,
              "duration": 950,
              "state": "passed",
              "speed": "fast",
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\");",
              "err": {},
              "uuid": "6dc1acb6-c25e-4f0d-b859-cd504747de54",
              "parentUUID": "84488a6e-2389-4162-a7ad-ac8cc91375dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checkout Basic Setup visits page /concerts by Navbar:1.4.1",
              "fullTitle": "Payments Checkout Basic Setup Checkout Basic Setup visits page /concerts by Navbar:1.4.1",
              "timedOut": null,
              "duration": 592,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Concert Tickets\").click();",
              "err": {},
              "uuid": "162bf8e6-45d1-4daa-9245-332b0cecdd94",
              "parentUUID": "84488a6e-2389-4162-a7ad-ac8cc91375dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checkout Basic Setup visits page /concerts by clicking button:1.4.2",
              "fullTitle": "Payments Checkout Basic Setup Checkout Basic Setup visits page /concerts by clicking button:1.4.2",
              "timedOut": null,
              "duration": 507,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.get(\"#concert\").click();",
              "err": {},
              "uuid": "38d67691-26ee-4a5c-8928-a878ec33d22b",
              "parentUUID": "84488a6e-2389-4162-a7ad-ac8cc91375dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6dc1acb6-c25e-4f0d-b859-cd504747de54",
            "162bf8e6-45d1-4daa-9245-332b0cecdd94",
            "38d67691-26ee-4a5c-8928-a878ec33d22b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2049,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
          "title": "Payments Checkout Payment Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checkout Basic Setup Adds 2 tickets (3 total):1.6.1",
              "fullTitle": "Payments Checkout Payment Flow Checkout Basic Setup Adds 2 tickets (3 total):1.6.1",
              "timedOut": null,
              "duration": 520,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\");\ncy.get(\"#add\").click();\ncy.get(\"#add\").click();\ncy.get(\"#quantity-input\").should(\"have.value\", 3);",
              "err": {},
              "uuid": "9ec61a05-751d-4517-a930-640024016d63",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout successfully - Total and Currency Check:1.6.2",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout successfully - Total and Currency Check:1.6.2",
              "timedOut": null,
              "duration": 1320,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\ncy.get(\"#add\").click();\ncy.intercept({\n  method: 'POST',\n  path: '**/create-checkout-session'\n}).as('getCheckoutSession');\ncy.get(\"#submit\").click();\ndebugger;\ncy.wait('@getCheckoutSession').then(interception => {\n  cy.log(interception);\n  expect(interception.response.statusCode).to.eq(200);\n});\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val;\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'payment_intent'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    expect(response.body).has.property('amount_total', 4000);\n    expect(response.body).has.property('currency', 'usd');\n  });\n});",
              "err": {},
              "uuid": "af0a172b-d60c-4352-a955-82e4101d11d3",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout Product successfully - Product Name and Image check:1.6.3",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout Product successfully - Product Name and Image check:1.6.3",
              "timedOut": null,
              "duration": 1132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\nconst ccNumber = \"4242424242424242\";\nconst month = \"12\";\nconst year = \"30\";\nconst cvc = \"123\";\nconst zipCode = \"90210\";\ncy.get(\"#add\").click();\ncy.get(\"#submit\").click();\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val + \"/line_items\";\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'data.price.product'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    response.body.data.forEach(item => {\n      expect(item).has.property('amount_total', 4000);\n      expect(item).has.property('currency', 'usd');\n      expect(item).has.property('description', 'Spring Academy Concert');\n      expect(item.price.product).has.property('name', 'Spring Academy Concert');\n      item.price.product.images.forEach(imageItem => {\n        expect(imageItem).to.equal('https://d37ugbyn3rpeym.cloudfront.net/partner-program/edu/kidvert.jpeg');\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "4b230c2e-3f18-4303-9378-7a223f110204",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout successfully - Card Payment Method Check:1.7",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout successfully - Card Payment Method Check:1.7",
              "timedOut": null,
              "duration": 1023,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\ncy.get(\"#add\").click();\ncy.get(\"#submit\").click();\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val;\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'payment_intent'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    expect(response.body).has.property('amount_total', 4000);\n    expect(response.body).has.property('currency', 'usd');\n    expect(response.body).has.property('payment_method_types').to.have.length(1);\n    response.body.payment_method_types.forEach(item => {\n      expect(item).to.equal('card');\n    });\n  });\n});",
              "err": {},
              "uuid": "ed4c536e-f656-481d-a4c8-5720075d9e88",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout successfully - Cancel and Success Url Check:1.8",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout successfully - Cancel and Success Url Check:1.8",
              "timedOut": null,
              "duration": 1133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\ncy.get(\"#add\").click();\ncy.get(\"#submit\").click();\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val;\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'payment_intent'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    expect(response.body).has.property('amount_total', 4000);\n    expect(response.body).has.property('currency', 'usd');\n    expect(response.body).has.property('cancel_url', Cypress.config().baseUrl + '/concert');\n    expect(response.body).has.property('success_url', Cypress.config().baseUrl + '/concert-success/{CHECKOUT_SESSION_ID}');\n    expect(response.body).has.property('payment_method_types').to.not.be.null; // expect(response.body.payment_intent.metadata).has.property('concerttickets', '2')\n    expect(response.body).has.property('payment_method_types').to.have.length(1);\n    response.body.payment_method_types.forEach(item => {\n      expect(item).to.equal('card');\n    });\n  });\n});",
              "err": {},
              "uuid": "ec4fb968-4b8f-43f4-8025-0d2078529412",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout successfully - Payment Intent Metadata Check:1.9",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout successfully - Payment Intent Metadata Check:1.9",
              "timedOut": null,
              "duration": 1253,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\ncy.get(\"#add\").click();\ncy.get(\"#submit\").click();\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val;\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'payment_intent'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    expect(response.body).has.property('amount_total', 4000);\n    expect(response.body).has.property('currency', 'usd');\n    expect(response.body).has.property('cancel_url', Cypress.config().baseUrl + '/concert');\n    expect(response.body).has.property('success_url', Cypress.config().baseUrl + '/concert-success/{CHECKOUT_SESSION_ID}');\n    expect(response.body).has.property('payment_method_types').to.not.be.null;\n    expect(response.body.payment_intent.metadata).has.property('concerttickets', '2');\n    expect(response.body).has.property('payment_method_types').to.have.length(1);\n    response.body.payment_method_types.forEach(item => {\n      expect(item).to.equal('card');\n    });\n  });\n});",
              "err": {},
              "uuid": "ab4633f9-c265-4a54-854d-70b7fecc3ec0",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Renders Stripe Checkout successfully - Cancel and Success Url Check:1.10",
              "fullTitle": "Payments Checkout Payment Flow Renders Stripe Checkout successfully - Cancel and Success Url Check:1.10",
              "timedOut": null,
              "duration": 1222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/concert\", {\n  followRedirect: false\n});\ncy.get(\"#add\").click();\ncy.get(\"#submit\").click();\ncy.get('#sessionId').contains('cs_test_', {\n  matchCase: false\n});\ncy.get('#sessionId').invoke('text').then(divText => {\n  sessionId = divText;\n});\ncy.get('#sessionId').invoke('text').as('sessionId2');\ncy.get('@sessionId2').then(val => {\n  cy.log('sessionId2: ' + val);\n  let stripesessionUrl = \"https://api.stripe.com/v1/checkout/sessions/\" + val;\n  cy.request({\n    method: 'GET',\n    url: stripesessionUrl,\n    qs: {\n      'expand[]': 'payment_intent'\n    },\n    headers: {\n      'Authorization': 'Bearer ' + Cypress.env('STRIPE_SECRET_KEY')\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.not.be.null;\n    expect(response.body).has.property('amount_total', 4000);\n    expect(response.body).has.property('currency', 'usd');\n    expect(response.body).has.property('cancel_url', Cypress.config().baseUrl + '/concert');\n    expect(response.body).has.property('success_url', Cypress.config().baseUrl + '/concert-success/{CHECKOUT_SESSION_ID}');\n    expect(response.body).has.property('payment_method_types').to.not.be.null; // expect(response.body.payment_intent.metadata).has.property('concerttickets', '2')\n    expect(response.body).has.property('payment_method_types').to.have.length(1);\n    response.body.payment_method_types.forEach(item => {\n      expect(item).to.equal('card');\n    });\n  });\n});",
              "err": {},
              "uuid": "0e224117-0a0c-4eb2-a419-b1cf78d94489",
              "parentUUID": "b5615f7d-3ea8-42b5-9b08-460f052895d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ec61a05-751d-4517-a930-640024016d63",
            "af0a172b-d60c-4352-a955-82e4101d11d3",
            "4b230c2e-3f18-4303-9378-7a223f110204",
            "ed4c536e-f656-481d-a4c8-5720075d9e88",
            "ec4fb968-4b8f-43f4-8025-0d2078529412",
            "ab4633f9-c265-4a54-854d-70b7fecc3ec0",
            "0e224117-0a0c-4eb2-a419-b1cf78d94489"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7603,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "stripechallengetestreport-individual",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "reportFilename": "stripechallengetestreport-individual",
        "overwrite": false,
        "html": false,
        "reportTitle": "Stripe Developer Challenge",
        "json": true
      },
      "version": "6.0.1"
    }
  }
}